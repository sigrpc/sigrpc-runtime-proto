// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message.proto

#include "message.pb.h"
#include "message.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace x64 {

static const char* SigRPC_method_names[] = {
  "/x64.SigRPC/LoadLib",
  "/x64.SigRPC/InvokeFunc",
  "/x64.SigRPC/PullPage",
};

std::unique_ptr< SigRPC::Stub> SigRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SigRPC::Stub> stub(new SigRPC::Stub(channel, options));
  return stub;
}

SigRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_LoadLib_(SigRPC_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InvokeFunc_(SigRPC_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_PullPage_(SigRPC_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SigRPC::Stub::LoadLib(::grpc::ClientContext* context, const ::x64::LoadLibMsg& request, ::x64::LoadLibMsg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::x64::LoadLibMsg, ::x64::LoadLibMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LoadLib_, context, request, response);
}

void SigRPC::Stub::async::LoadLib(::grpc::ClientContext* context, const ::x64::LoadLibMsg* request, ::x64::LoadLibMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::x64::LoadLibMsg, ::x64::LoadLibMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadLib_, context, request, response, std::move(f));
}

void SigRPC::Stub::async::LoadLib(::grpc::ClientContext* context, const ::x64::LoadLibMsg* request, ::x64::LoadLibMsg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LoadLib_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::x64::LoadLibMsg>* SigRPC::Stub::PrepareAsyncLoadLibRaw(::grpc::ClientContext* context, const ::x64::LoadLibMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::x64::LoadLibMsg, ::x64::LoadLibMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LoadLib_, context, request);
}

::grpc::ClientAsyncResponseReader< ::x64::LoadLibMsg>* SigRPC::Stub::AsyncLoadLibRaw(::grpc::ClientContext* context, const ::x64::LoadLibMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoadLibRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* SigRPC::Stub::InvokeFuncRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>::Create(channel_.get(), rpcmethod_InvokeFunc_, context);
}

void SigRPC::Stub::async::InvokeFunc(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::x64::InvokeFuncMsg,::x64::InvokeFuncMsg>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::x64::InvokeFuncMsg,::x64::InvokeFuncMsg>::Create(stub_->channel_.get(), stub_->rpcmethod_InvokeFunc_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* SigRPC::Stub::AsyncInvokeFuncRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>::Create(channel_.get(), cq, rpcmethod_InvokeFunc_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* SigRPC::Stub::PrepareAsyncInvokeFuncRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>::Create(channel_.get(), cq, rpcmethod_InvokeFunc_, context, false, nullptr);
}

::grpc::Status SigRPC::Stub::PullPage(::grpc::ClientContext* context, const ::x64::PullPageMsg& request, ::x64::PullPageMsg* response) {
  return ::grpc::internal::BlockingUnaryCall< ::x64::PullPageMsg, ::x64::PullPageMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PullPage_, context, request, response);
}

void SigRPC::Stub::async::PullPage(::grpc::ClientContext* context, const ::x64::PullPageMsg* request, ::x64::PullPageMsg* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::x64::PullPageMsg, ::x64::PullPageMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PullPage_, context, request, response, std::move(f));
}

void SigRPC::Stub::async::PullPage(::grpc::ClientContext* context, const ::x64::PullPageMsg* request, ::x64::PullPageMsg* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PullPage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::x64::PullPageMsg>* SigRPC::Stub::PrepareAsyncPullPageRaw(::grpc::ClientContext* context, const ::x64::PullPageMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::x64::PullPageMsg, ::x64::PullPageMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PullPage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::x64::PullPageMsg>* SigRPC::Stub::AsyncPullPageRaw(::grpc::ClientContext* context, const ::x64::PullPageMsg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPullPageRaw(context, request, cq);
  result->StartCall();
  return result;
}

SigRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SigRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SigRPC::Service, ::x64::LoadLibMsg, ::x64::LoadLibMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SigRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::x64::LoadLibMsg* req,
             ::x64::LoadLibMsg* resp) {
               return service->LoadLib(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SigRPC_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< SigRPC::Service, ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>(
          [](SigRPC::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::x64::InvokeFuncMsg,
             ::x64::InvokeFuncMsg>* stream) {
               return service->InvokeFunc(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SigRPC_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SigRPC::Service, ::x64::PullPageMsg, ::x64::PullPageMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SigRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::x64::PullPageMsg* req,
             ::x64::PullPageMsg* resp) {
               return service->PullPage(ctx, req, resp);
             }, this)));
}

SigRPC::Service::~Service() {
}

::grpc::Status SigRPC::Service::LoadLib(::grpc::ServerContext* context, const ::x64::LoadLibMsg* request, ::x64::LoadLibMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SigRPC::Service::InvokeFunc(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SigRPC::Service::PullPage(::grpc::ServerContext* context, const ::x64::PullPageMsg* request, ::x64::PullPageMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace x64

