// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: message.proto
#ifndef GRPC_message_2eproto__INCLUDED
#define GRPC_message_2eproto__INCLUDED

#include "message.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace x64 {

class SigRPC final {
 public:
  static constexpr char const* service_full_name() {
    return "x64.SigRPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status LoadLib(::grpc::ClientContext* context, const ::x64::LoadLibMsg& request, ::x64::LoadLibMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::x64::LoadLibMsg>> AsyncLoadLib(::grpc::ClientContext* context, const ::x64::LoadLibMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::x64::LoadLibMsg>>(AsyncLoadLibRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::x64::LoadLibMsg>> PrepareAsyncLoadLib(::grpc::ClientContext* context, const ::x64::LoadLibMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::x64::LoadLibMsg>>(PrepareAsyncLoadLibRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>> InvokeFunc(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>>(InvokeFuncRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>> AsyncInvokeFunc(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>>(AsyncInvokeFuncRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>> PrepareAsyncInvokeFunc(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>>(PrepareAsyncInvokeFuncRaw(context, cq));
    }
    virtual ::grpc::Status PullPage(::grpc::ClientContext* context, const ::x64::PullPageMsg& request, ::x64::PullPageMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::x64::PullPageMsg>> AsyncPullPage(::grpc::ClientContext* context, const ::x64::PullPageMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::x64::PullPageMsg>>(AsyncPullPageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::x64::PullPageMsg>> PrepareAsyncPullPage(::grpc::ClientContext* context, const ::x64::PullPageMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::x64::PullPageMsg>>(PrepareAsyncPullPageRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void LoadLib(::grpc::ClientContext* context, const ::x64::LoadLibMsg* request, ::x64::LoadLibMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void LoadLib(::grpc::ClientContext* context, const ::x64::LoadLibMsg* request, ::x64::LoadLibMsg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InvokeFunc(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::x64::InvokeFuncMsg,::x64::InvokeFuncMsg>* reactor) = 0;
      virtual void PullPage(::grpc::ClientContext* context, const ::x64::PullPageMsg* request, ::x64::PullPageMsg* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PullPage(::grpc::ClientContext* context, const ::x64::PullPageMsg* request, ::x64::PullPageMsg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::x64::LoadLibMsg>* AsyncLoadLibRaw(::grpc::ClientContext* context, const ::x64::LoadLibMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::x64::LoadLibMsg>* PrepareAsyncLoadLibRaw(::grpc::ClientContext* context, const ::x64::LoadLibMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* InvokeFuncRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* AsyncInvokeFuncRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* PrepareAsyncInvokeFuncRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::x64::PullPageMsg>* AsyncPullPageRaw(::grpc::ClientContext* context, const ::x64::PullPageMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::x64::PullPageMsg>* PrepareAsyncPullPageRaw(::grpc::ClientContext* context, const ::x64::PullPageMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status LoadLib(::grpc::ClientContext* context, const ::x64::LoadLibMsg& request, ::x64::LoadLibMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::x64::LoadLibMsg>> AsyncLoadLib(::grpc::ClientContext* context, const ::x64::LoadLibMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::x64::LoadLibMsg>>(AsyncLoadLibRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::x64::LoadLibMsg>> PrepareAsyncLoadLib(::grpc::ClientContext* context, const ::x64::LoadLibMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::x64::LoadLibMsg>>(PrepareAsyncLoadLibRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>> InvokeFunc(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>>(InvokeFuncRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>> AsyncInvokeFunc(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>>(AsyncInvokeFuncRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>> PrepareAsyncInvokeFunc(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>>(PrepareAsyncInvokeFuncRaw(context, cq));
    }
    ::grpc::Status PullPage(::grpc::ClientContext* context, const ::x64::PullPageMsg& request, ::x64::PullPageMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::x64::PullPageMsg>> AsyncPullPage(::grpc::ClientContext* context, const ::x64::PullPageMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::x64::PullPageMsg>>(AsyncPullPageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::x64::PullPageMsg>> PrepareAsyncPullPage(::grpc::ClientContext* context, const ::x64::PullPageMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::x64::PullPageMsg>>(PrepareAsyncPullPageRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void LoadLib(::grpc::ClientContext* context, const ::x64::LoadLibMsg* request, ::x64::LoadLibMsg* response, std::function<void(::grpc::Status)>) override;
      void LoadLib(::grpc::ClientContext* context, const ::x64::LoadLibMsg* request, ::x64::LoadLibMsg* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InvokeFunc(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::x64::InvokeFuncMsg,::x64::InvokeFuncMsg>* reactor) override;
      void PullPage(::grpc::ClientContext* context, const ::x64::PullPageMsg* request, ::x64::PullPageMsg* response, std::function<void(::grpc::Status)>) override;
      void PullPage(::grpc::ClientContext* context, const ::x64::PullPageMsg* request, ::x64::PullPageMsg* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::x64::LoadLibMsg>* AsyncLoadLibRaw(::grpc::ClientContext* context, const ::x64::LoadLibMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::x64::LoadLibMsg>* PrepareAsyncLoadLibRaw(::grpc::ClientContext* context, const ::x64::LoadLibMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* InvokeFuncRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* AsyncInvokeFuncRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* PrepareAsyncInvokeFuncRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::x64::PullPageMsg>* AsyncPullPageRaw(::grpc::ClientContext* context, const ::x64::PullPageMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::x64::PullPageMsg>* PrepareAsyncPullPageRaw(::grpc::ClientContext* context, const ::x64::PullPageMsg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_LoadLib_;
    const ::grpc::internal::RpcMethod rpcmethod_InvokeFunc_;
    const ::grpc::internal::RpcMethod rpcmethod_PullPage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status LoadLib(::grpc::ServerContext* context, const ::x64::LoadLibMsg* request, ::x64::LoadLibMsg* response);
    virtual ::grpc::Status InvokeFunc(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* stream);
    virtual ::grpc::Status PullPage(::grpc::ServerContext* context, const ::x64::PullPageMsg* request, ::x64::PullPageMsg* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_LoadLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_LoadLib() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_LoadLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadLib(::grpc::ServerContext* /*context*/, const ::x64::LoadLibMsg* /*request*/, ::x64::LoadLibMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadLib(::grpc::ServerContext* context, ::x64::LoadLibMsg* request, ::grpc::ServerAsyncResponseWriter< ::x64::LoadLibMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InvokeFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InvokeFunc() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_InvokeFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeFunc(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeFunc(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PullPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PullPage() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PullPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullPage(::grpc::ServerContext* /*context*/, const ::x64::PullPageMsg* /*request*/, ::x64::PullPageMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPullPage(::grpc::ServerContext* context, ::x64::PullPageMsg* request, ::grpc::ServerAsyncResponseWriter< ::x64::PullPageMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_LoadLib<WithAsyncMethod_InvokeFunc<WithAsyncMethod_PullPage<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_LoadLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_LoadLib() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::x64::LoadLibMsg, ::x64::LoadLibMsg>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::x64::LoadLibMsg* request, ::x64::LoadLibMsg* response) { return this->LoadLib(context, request, response); }));}
    void SetMessageAllocatorFor_LoadLib(
        ::grpc::MessageAllocator< ::x64::LoadLibMsg, ::x64::LoadLibMsg>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::x64::LoadLibMsg, ::x64::LoadLibMsg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_LoadLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadLib(::grpc::ServerContext* /*context*/, const ::x64::LoadLibMsg* /*request*/, ::x64::LoadLibMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadLib(
      ::grpc::CallbackServerContext* /*context*/, const ::x64::LoadLibMsg* /*request*/, ::x64::LoadLibMsg* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InvokeFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InvokeFunc() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->InvokeFunc(context); }));
    }
    ~WithCallbackMethod_InvokeFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeFunc(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* InvokeFunc(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PullPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PullPage() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::x64::PullPageMsg, ::x64::PullPageMsg>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::x64::PullPageMsg* request, ::x64::PullPageMsg* response) { return this->PullPage(context, request, response); }));}
    void SetMessageAllocatorFor_PullPage(
        ::grpc::MessageAllocator< ::x64::PullPageMsg, ::x64::PullPageMsg>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::x64::PullPageMsg, ::x64::PullPageMsg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PullPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullPage(::grpc::ServerContext* /*context*/, const ::x64::PullPageMsg* /*request*/, ::x64::PullPageMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PullPage(
      ::grpc::CallbackServerContext* /*context*/, const ::x64::PullPageMsg* /*request*/, ::x64::PullPageMsg* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_LoadLib<WithCallbackMethod_InvokeFunc<WithCallbackMethod_PullPage<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_LoadLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_LoadLib() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_LoadLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadLib(::grpc::ServerContext* /*context*/, const ::x64::LoadLibMsg* /*request*/, ::x64::LoadLibMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InvokeFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InvokeFunc() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_InvokeFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeFunc(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PullPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PullPage() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PullPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullPage(::grpc::ServerContext* /*context*/, const ::x64::PullPageMsg* /*request*/, ::x64::PullPageMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_LoadLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_LoadLib() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_LoadLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadLib(::grpc::ServerContext* /*context*/, const ::x64::LoadLibMsg* /*request*/, ::x64::LoadLibMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLoadLib(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InvokeFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InvokeFunc() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_InvokeFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeFunc(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInvokeFunc(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PullPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PullPage() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PullPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullPage(::grpc::ServerContext* /*context*/, const ::x64::PullPageMsg* /*request*/, ::x64::PullPageMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPullPage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_LoadLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_LoadLib() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->LoadLib(context, request, response); }));
    }
    ~WithRawCallbackMethod_LoadLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LoadLib(::grpc::ServerContext* /*context*/, const ::x64::LoadLibMsg* /*request*/, ::x64::LoadLibMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* LoadLib(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InvokeFunc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InvokeFunc() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->InvokeFunc(context); }));
    }
    ~WithRawCallbackMethod_InvokeFunc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InvokeFunc(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::x64::InvokeFuncMsg, ::x64::InvokeFuncMsg>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* InvokeFunc(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PullPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PullPage() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PullPage(context, request, response); }));
    }
    ~WithRawCallbackMethod_PullPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PullPage(::grpc::ServerContext* /*context*/, const ::x64::PullPageMsg* /*request*/, ::x64::PullPageMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PullPage(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LoadLib : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_LoadLib() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::x64::LoadLibMsg, ::x64::LoadLibMsg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::x64::LoadLibMsg, ::x64::LoadLibMsg>* streamer) {
                       return this->StreamedLoadLib(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_LoadLib() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LoadLib(::grpc::ServerContext* /*context*/, const ::x64::LoadLibMsg* /*request*/, ::x64::LoadLibMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLoadLib(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::x64::LoadLibMsg,::x64::LoadLibMsg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PullPage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PullPage() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::x64::PullPageMsg, ::x64::PullPageMsg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::x64::PullPageMsg, ::x64::PullPageMsg>* streamer) {
                       return this->StreamedPullPage(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PullPage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PullPage(::grpc::ServerContext* /*context*/, const ::x64::PullPageMsg* /*request*/, ::x64::PullPageMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPullPage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::x64::PullPageMsg,::x64::PullPageMsg>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_LoadLib<WithStreamedUnaryMethod_PullPage<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_LoadLib<WithStreamedUnaryMethod_PullPage<Service > > StreamedService;
};

}  // namespace x64


#endif  // GRPC_message_2eproto__INCLUDED
